- aggrigation is use to process multiple results and send computed results at end.

- so you can say a aggrigation is group of oprations in sequence and every opration process data and pass it to other opration just like pipelne thats why it's cald aggrigation pipeline.

- it is most usefull in pufforming complex custom quries, when we want to add some extra data or process on extra data more then CRUD, when we want to group values from multiple documents togather.

- now from mongo 4.2 update statment can be also done with aggrigation pipeline


- there are many diffrent oprators which we can use in aggrigation pipeline so when you will become more and more fammilear with query oprations and functions you will know more better usage of aggrigation pipelines 

- but the aggrigation pipeline is very wast and big topic we can do almost anything with aggrigation pipeline so for now we are ok with basig aggriagtion.




-DATA


db.orders.insertMany( [
   { _id: 0, name: "Pepperoni", size: "small", price: 19,
     quantity: 10, date: ISODate( "2021-03-13T08:14:30Z" ) },
   { _id: 1, name: "Pepperoni", size: "medium", price: 20,
     quantity: 20, date : ISODate( "2021-03-13T09:13:24Z" ) },
   { _id: 2, name: "Pepperoni", size: "large", price: 21,
     quantity: 30, date : ISODate( "2021-03-17T09:22:12Z" ) },
   { _id: 3, name: "Cheese", size: "small", price: 12,
     quantity: 15, date : ISODate( "2021-03-13T11:21:39.736Z" ) },
   { _id: 4, name: "Cheese", size: "medium", price: 13,
     quantity:50, date : ISODate( "2022-01-12T21:23:13.331Z" ) },
   { _id: 5, name: "Cheese", size: "large", price: 14,
     quantity: 10, date : ISODate( "2022-01-12T05:08:13Z" ) },
   { _id: 6, name: "Vegan", size: "small", price: 17,
     quantity: 10, date : ISODate( "2021-01-13T05:08:13Z" ) },
   { _id: 7, name: "Vegan", size: "medium", price: 18,
     quantity: 10, date : ISODate( "2021-01-13T05:10:13Z" ) }
] )



to use aggrigation we can use aggrigate function from mongoDB it accepts array or objects where every object is one pipeline for the query.


1) db.orders.aggregate( [
   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },
   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }
] )

 - with $match oprator we can find documents base on some query so it's just like find method.

- $group is use to group returned results base on any field

- hear _id is not _id from document it's key name which we want to use for returned documents and they will be unique because we are grouping base on them so it's called _id we can change it to any name.

- we can access fields of document with using $<name> and we can access global variables from mongoDB with $$<name>

- totalQuantity is field created by us and there we are using $sum and we sum the quantity of document

- OUTPUT
[
   { _id: 'Cheese', totalQuantity: 50 },
   { _id: 'Vegan', totalQuantity: 10 },
   { _id: 'Pepperoni', totalQuantity: 20 }
]




2) db.orders.aggregate( [
   // Stage 1: Filter pizza order documents by date range
   {
      $match:
      {
         "date": { $gte: new ISODate( "2020-01-30" ), $lt: new ISODate( "2022-01-30" ) }
      }
   },
   // Stage 2: Group remaining documents by date and calculate results
   {
      $group:
      {
         _id: { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
         totalOrderValue: { $sum: { $multiply: [ "$price", "$quantity" ] } },
         averageOrderQuantity: { $avg: "$quantity" }
      }
   },
   // Stage 3: Sort documents by totalOrderValue in descending order
   {
      $sort: { totalOrderValue: -1 }
   }
 ] )


 - in $match we are matching base on date and ISODate date is function to comvert the string date to date object.

 - in $group we group base on dates but the value should be string date so we convert date object to string date by $dateToString query oprator where we pass fromat which we want and field which contains date object

 - totalOrderValue is sum of multiplaction of price and quantity so $multiplaction is also one query oprator

 - averageOrderQuantity is avrage of quantity field of all records in same group

 - $sort is used to sort document base on some field hear we sort base on totalOrderValue desending


 -OUTPUT
 [
   { _id: '2022-01-12', totalOrderValue: 790, averageOrderQuantity: 30 },
   { _id: '2021-03-13', totalOrderValue: 770, averageOrderQuantity: 15 },
   { _id: '2021-03-17', totalOrderValue: 630, averageOrderQuantity: 30 },
   { _id: '2021-01-13', totalOrderValue: 350, averageOrderQuantity: 10 }
]






- so like this you can se we can pass any login in aggriagtion pipeline and it's just like passing sequence after selcetion instractions and at end we will get final result

- so you can see this kind of queries are not common for everyday usages it's just custom queries which will be use for custom senarios so we don't remeber this all syntext we just create those queries with help of doc base on senarios.

- so wn don't rimember all this queries we just remeber which kind of query oprator which we have which we can use in our query or find one by going throught refrence in doc and we remoeber functions which we can use. 

- so it helps us to create such kind of queries.

- also check sql to aggrigation mapping chart to clear some concepts of how we do some sql things like group, where, select in mongoDB aggregate

- also there is practical mongoDB aggregation pdf in mongoDB doc which has a to z in it for aggregate so you can check it.