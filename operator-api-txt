- mongoDB has many operators which we can use in many places to write query or any specific behaviour. most of all operators starts with $ symbol

- in mongoDB there mainly 4 kind or operators

1. query and projection operators = this operators are list of operators which we can use when we are writing find query (find query mins a query we right in find() updateOne(), updateMany(), deleteOne() etc function ) and also on find projection

2. update operators = this are list of operators which we can use when we wright update querys and when we use aggrigation on update statments.

3. aggrigation stages operators = this are list of operators which we can use as diffrent stage of aggrigation pipeline

4. aggrigation operators = this are list of operators which we can use in any one or more aggrigation stage in affrigation pipeline.

NOET = there are some operators which we can use in multiple places like in query, aggrigate, update places as well.

hear we will list some of the most usefull operators and also we will only right description and examples for only operators whic not understandable directly. for more info you can visit operators in reference section of mondoDB docs.

//////////////////////// query and projection operators ///////////////////////

1. $eq
2. $gt
3. $get
4. $in = match any of value specified in array
5. $lt
6. $lte
7. $ne = match all the value which are not equal to specified value
8. $nin = match none of the values specified in array

9) $and = join the query with logical and operator

   - db.inventory.find( { $and: [ { price: { $ne: 1.99 } }, { price: { $exists: true } } ] } ) this is same as db.inventory.find( { price: { $ne: 1.99, $exists: true } } )

   - db.inventory.find( {
     $and: [
     { $or: [ { qty: { $lt : 10 } }, { qty : { $gt: 50 } } ] },
     { $or: [ { sale: true }, { price : { $lt : 5 } } ] }
     ]
     } )

10) $not = invert the effect of query expression and return documents that don't match the exprission

    - db.inventory.find( { price: { $not: { $gt: 1.99 } } } )
    - db.inventory.find( { item: { $not: { $regex: "^p.\*" } } } )

11) $nor = joins query with logical nor operator it accepts array of condations and gives results which don't satisfy any of condations

    - db.inventory.find( { $nor: [ { price: 1.99 }, { qty: { $lt: 20 } }, { sale: true } ] } )

12) $or = joins query with logical or operator it accepts array and return resultsa which satisfy any one or more condation provided.

    - db.inventory.find( { $or: [ { quantity: { $lt: 20 } }, { price: 10 } ] } )

13) $exists = its value is in boolean we define it in any field and if field is there. give results base on field exist or not.

    - db.records.find( { a: { $exists: true } } )
    - db.inventory.find( { qty: { $exists: true, $nin: [ 5, 15 ] } } )

14) $type = select docs which field has data type we specified and types are mongodb types numbers.

    - db.addressBook.find( { "zipCode" : { $type : 2 } } );

15) $regex = select docs which match provided regex.

    - { name: { $regex: /acme.\*corp/i }
    - { name: { $regex: /acme.\*corp/i, $nin: [ 'acmeblahcorp' ] } }

16) $text = use to pufform varios kind of text search and also have sub query operatiors of it's onw. to check all opssible usages check doc.

    - db.articles.find( { $text: { $search: "coffee" } } ) find docs where any field contains coffee in it.

17) $all = accept array find records which field has all same valuse in it

    - [1,2,3] = [3,1,2]
    - [1,2,3,4] = [3,1,2]

18) $elemMatch = select doc in which all fields valuse match with we specified

    - [1,2,3] = [3,2,1]
    - {a: 1, b:2} = {b: 2, a:1}

19) $size = accept int and finds doc where arr fields length is same as we provided

20) $ = projects first element from return array field of docs.

    - from data {a: 1, b [1,2,3]} query db.students.find( {}, { "grades.$": 1 } ) will reyturn {a: 1, b[1]}
    - db.students.find( {}, { "grades.$.age": 1 } )

21) $slice = limits number of elements projected from array

    - db.posts.find( {}, { comments: { $slice: 3 } } ) from comments array return first 3
    - db.posts.find( {}, { comments: { $slice: - 3 } } ) from comments array retuen last 3

//////////////////// update operators //////////////////////////

1. $currentDate = sets field value as current date or timestamp.

db.customers.updateOne(
   { _id: 1 },
   {
     $currentDate: {
        lastModified: true,
     },
     $set: {
        "cancellation.reason": "user request",
        status: "D"
     }
   }
)

2) $inc = increment value of field by specific amount
- db.products.updateOne(
   { sku: "abc123" },
   { $inc: { quantity: -2, "metrics.orders": 1 } }
)

3) $min = only updates the value if the specified value is less then current field

db.scores.updateOne( { _id: 1 }, { $min: { lowScore: 150 } } ) it updates id 1 lowscore field if only it's > 150

4) $max = only updates the value if the specifdied value is greter then current field

db.scores.updateOne( { _id: 1 }, { $max: { lowScore: 150 } } ) it updates id 1 lowscore field if only it's > 150

5) $mul = multiply value with specific amount 

db.products.updateOne(
   { _id: 1 },
   { $mul:
      {
         quantity: 2
       }
   }
)

6) $rename = this operator updates the name of field by new name
db.students.updateOne(
   { _id: 1 },
   { $rename: { 'cell': 'mobile', 'num', 'number' } }
)

7) $set = most usefull it sets the value of provided fields in the founded docs

db.products.updateOne(
   { _id: 100 },
   { $set:
      {
        quantity: 500,
        details: { model: "2600", make: "Fashionaires" },
        tags: [ "coats", "outerwear", "clothing" ]
      }
   }
)

db.products.updateOne(
   { _id: 100 },
   { $set: { "details.make": "Kustom Kidz" } }
)

db.products.updateOne(
   { _id: 100 },
   { $set:
      {
        "tags.1": "rain gear",
        "ratings.0.rating": 2
      }
   }
)

8) $unset = remove field from doc

db.products.updateOne(
   { sku: "unknown" },
   { $unset: { quantity: "", instock: "" } }
)

9) $pop = removes first or last element from array

db.students.updateOne( { _id: 10 }, { $pop: { scores: 1 } } )
db.students.updateOne( { _id: 1 }, { $pop: { scores: -1 } } )

10) $pull = remove all elements of array of embeded array which match specific query

db.stores.updateMany(
    { },
    { $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } }
)

- this will pull apple and orang from fruits and carrots from vegetables

db.stores.updateMany(
    { },
    { $pull: { comments._id: { $in: [ "1234", "9876" ] } } }
)

- in mongoose embeded doc alos have _id field to track all elements of array so this pull will find id which are in $in and remove it

10) $push = it push element in array

db.stores.updateMany(
    { },
    { $push: { score: 20 } }
)


/////////////////////// aggregation stage operatiors ///////////////////////
NOTE: in aggrigation whith the help of $<fieldName> we can use the field for doument just look at $homework bellow it's field from the document.

1) $addFields = use to add extra fealds in the document we we provide. it can also update the existing field if it's already there.

db.scores.aggregate( [
   {
     $addFields: {
       totalHomework: { $sum: "$homework" } ,
       totalQuiz: { $sum: "$quiz" }
     }
   },
   {
     $addFields: { totalScore:
       { $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }
   }
] )

db.vehicles.aggregate( [
        {
           $addFields: {
              "specs.fuel_type": "unleaded"
           }
        }
] )

2) $count = counts number of documents after last pipeline stage. 

db.scores.aggregate(
  [
    {
      $match: {
        score: {
          $gt: 80
        }
      }
    },
    {
      $count: "passing_scores"
    }
  ]
)

{ "passing_scores" : 4 }


3) $group = a group is very usefull stage in the aggregation group seprates documents base on group key. we define group key as _id in the group obj and then if we want we can add more fields in group obj as well

there are some sub operators which we can use with group like $avg, $count, $max, $min, $push, $sum etc.

db.sales.aggregate( [
  {
    $group: {
       _id: null,
       count: { $count: { } }
    }
  }
] )

grouping by null is just like no grouping and we add other field count and use $count in it this will return all doc count. 
{ "_id" : null, "count" : 8 }

db.sales.aggregate( [ { $group : { _id : "$item" } } ] )

grouping by item will group items in distinct 
{ "_id" : "abc" }
{ "_id" : "jkl" }
{ "_id" : "def" }
{ "_id" : "xyz" }


db.sales.aggregate(
  [
    {
      $group :
        {
          _id : "$item",
          totalSaleAmount: { $sum: { $multiply: [ "$price", "$quantity" ] } }
        }
     },
  
   ]
 )

 hear we are grouping docs base on item and then adding new field cald totalSaleAmount which will be sum of multiplication of the price and quantity of that group 

 { "_id" : "abc", "totalSaleAmount" : 170 }
{ "_id" : "xyz", "totalSaleAmount" : 150 }
{ "_id" : "def", "totalSaleAmount" : 112.5 }


db.sales.aggregate([
  {
    $group : {
       _id : { $dateToString: { format: "%Y-%m-%d", date: "$date" } },
       totalSaleAmount: { $sum: { $multiply: [ "$price", "$quantity" ] } },
       averageQuantity: { $avg: "$quantity" },
       count: { $sum: 1 }
    }
  }
 ])

 hear we are grouping by date and then calculating totalSaleAmount and averageQuantity and incressing count 1 for each document so at the end we will have documents grouped by diffrent date where we will have totalSaleAmount per date averageQuantity and total count of records by date


 { "_id" : "2014-04-04", "totalSaleAmount" : 200, "averageQuantity" : 15, "count" : 2 }
{ "_id" : "2014-03-15", "totalSaleAmount" : 50, "averageQuantity" : 10, "count" : 1 }
{ "_id" : "2014-03-01", "totalSaleAmount" : 40, "averageQuantity" : 1.5, "count" : 2 }


4) $limit = limit the number of documents retured from above pipeline

db.article.aggregate([
   { $limit : 5 }
]);


5) $lookup = lookup will be use to do left outer join with the other collections of database. it's just loke a koin in the sql.

a lookup has this stntext 
{
   $lookup:
     {
       from: <collection to join>,
       localField: <field from the input documents>,
       foreignField: <field from the documents of the "from" collection>,
       as: <output array field>
     }
}

user collection has id and order hase user_id feald  
- we can get all users with obder like this

db.users.aggrigate([
    {
        $lookup: {
            from: 'orders',
            localField: '_id',
            foreignField: 'user_id',
            as: 'user_orders'
        }
    }
])


6) $match = $match match and returns the document which satisfy the condation provided it's just like where in sql. we can pass any valid expression in match which we pass in find query.

db.collection.aggregate([
    {
        $match: {_id: '1234'}
    }
])

db.collection.aggregate([
    {
        $match: {age: {$gt: 20}}
    }
])

db.collection.aggregate([
    {
        $match: {
            age: {$gt: 20}, 
            $or: [{expreence:{ $gt: 12 }}]
        }
    }
])

7) $project = same as project in find it returns only fields specifdied as 1 or true in it.

db.collection.aggregate([
    {
        $project: {title: 1, age: true, name: false, role: 0, lang.en: 1 }
    }
])

db.collection.aggregate([
    {
        match: {age: {$gte: 20}}
    }
    {
        $project: {title: 1, age: true, name: false, role: 0, comments: {$slice: 3} }
    }
])

8) $skip = it skip n number of docs
db.article.aggregate([
    { $skip : 5 }
]);

9) $sort = it sorts the document base on any field and aes and des

db.match.aggregate(
   [
     { $sort : { score : 1 } }
   ]
)

db.match.aggregate(
   [
     { $sort : { score : 1, _id: -1 } }
   ]
)


//////////// aggregation operatiors ////////////////////

there are to much aggregation operatiors and many of them are also in above list so when want to use this aggregation operatiors find them in api doc and use them base on your needs.  